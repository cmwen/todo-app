#!/usr/bin/env node
import { Command } from 'commander';
import pino from 'pino';
import { startServer } from '@todo-app/backend/server';
import { DatabaseConnection } from '@todo-app/backend/database/connection';
import { TodoService } from '@todo-app/backend/services/todo-service';

const program = new Command();
program
	.name('todo-app')
	.description('Todo app CLI and orchestrator')
	.option('--db <path>', 'Path to SQLite DB', 'data/todo.db')
	.option('--json', 'Output JSON', false)
	.option('--log-level <level>', 'Log level', 'info');

const logger = pino({ level: process.env.LOG_LEVEL ?? 'info' });

function withService(dbPath, fn) {
	const conn = new DatabaseConnection({ dbPath });
	const svc = new TodoService(conn.db);
	try {
		return fn(svc);
	} finally {
		conn.close();
	}
}

program
	.command('web')
	.description('Start WebSocket backend server')
	.option('-p, --port <port>', 'Port', (v) => parseInt(v, 10), 8080)
			.action((opts, cmd) => {
				const parent = cmd.parent;
		const dbPath = parent.getOptionValue('db');
		const { port } = opts;
		startServer({ port, dbPath });
		logger.info(`Server started on ws://localhost:${port}`);
	});

program
	.command('mcp')
	.description('Start MCP stdio server')
			.action(async (opts, cmd) => {
				const parent = cmd.parent;
		const dbPath = parent.getOptionValue('db');
		const { startMCP } = await import('@todo-app/mcp');
		await startMCP({ dbPath });
	});

program
	.command('add')
	.description('Add a todo')
	.requiredOption('-t, --title <title>', 'Title')
	.option('-d, --description <desc>', 'Description')
	.option('-p, --priority <priority>', 'Priority (low|medium|high)', 'medium')
			.action((opts, cmd) => {
				const parent = cmd.parent;
		const outJson = parent.getOptionValue('json');
		const dbPath = parent.getOptionValue('db');
		const todo = withService(dbPath, (svc) => svc.create(opts));
		if (outJson) console.log(JSON.stringify(todo, null, 2));
		else console.log(`Created: ${todo.id} '${todo.title}' [${todo.priority}]`);
	});

program
	.command('list')
	.description('List todos')
			.action((opts, cmd) => {
				const parent = cmd.parent;
		const outJson = parent.getOptionValue('json');
		const dbPath = parent.getOptionValue('db');
		const todos = withService(dbPath, (svc) => svc.list());
		if (outJson) console.log(JSON.stringify(todos, null, 2));
		else for (const t of todos) console.log(`${t.completed ? 'âœ”' : ' '} ${t.id} ${t.title} [${t.priority}]`);
	});

program
	.command('update')
	.description('Update a todo')
	.requiredOption('-i, --id <id>', 'Todo ID')
	.option('-t, --title <title>', 'Title')
	.option('-d, --description <desc>', 'Description')
	.option('-c, --completed <bool>', 'Completed (true|false)')
	.option('-p, --priority <priority>', 'Priority (low|medium|high)')
			.action((opts, cmd) => {
				const parent = cmd.parent;
		const outJson = parent.getOptionValue('json');
		const dbPath = parent.getOptionValue('db');
		if (typeof opts.completed !== 'undefined') {
			opts.completed = String(opts.completed).toLowerCase() === 'true';
		}
		const todo = withService(dbPath, (svc) => svc.update(opts));
		if (outJson) console.log(JSON.stringify(todo, null, 2));
		else console.log(`Updated: ${todo.id} -> '${todo.title}' ${todo.completed ? '(completed)' : ''}`);
	});

program
	.command('delete')
	.description('Delete a todo')
	.requiredOption('-i, --id <id>', 'Todo ID')
			.action((opts, cmd) => {
				const parent = cmd.parent;
		const outJson = parent.getOptionValue('json');
		const dbPath = parent.getOptionValue('db');
		withService(dbPath, (svc) => svc.delete(opts.id));
		if (outJson) console.log(JSON.stringify({ deleted: opts.id }));
		else console.log(`Deleted: ${opts.id}`);
	});

// Default to help when no args
if (process.argv.length <= 2) {
	// run interactive mode later; for now: list
	process.argv.push('list');
}

program.parseAsync(process.argv);
